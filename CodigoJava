package interpret;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;

public class Interpret {

    static String PC;//proxima linha
    static String instr_type;//tipo da instrução para analise
    static String data;//instrução completa de 32bits
    
    public static void main(String[] args) throws IOException {
        abreArquivo();
    }

    static void escreveArquivo(int soma ) throws IOException {
        OutputStream os = new FileOutputStream("C:\\MemoriaDeDados.txt", true);
        OutputStreamWriter osw = new OutputStreamWriter(os);
        BufferedWriter bw = new BufferedWriter(osw);
        
        bw.write("0000000000000000000000000000"+Integer.toBinaryString(soma));//fixado para testes...
        bw.newLine();
        bw.close();
    }

    static void abreArquivo() throws IOException {
        //lendo o arquivo de programa
        InputStream is = new FileInputStream("C:\\MemoriaDePrograma.txt");
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        
        //lendo o arquivo de dados
        InputStream is2 = new FileInputStream("C:\\MemoriaDeDados.txt");
        InputStreamReader isr2 = new InputStreamReader(is2);
        BufferedReader br2 = new BufferedReader(isr2);

        String registadorDestino_01111 = null;//R1(a)
        String registadorDestino_01110 = null;//R2(b)
        String registadorDestino_01100;//R3(c)
        
        data = br.readLine();//leitura da operação na memoria de programa no arquivo
        PC = br.readLine();//PC = data + 1;
        
        System.out.println("Configuração do Sistema: "+data.length()+" bits");
        
        instr_type = data.substring(0,11);//Tipo de operação ( Load, Store, Store Half)
        if(instr_type.contains("00001110101")){//load
            
            registadorDestino_01111 = data.substring(11,16);//Registrador onde será destinado A
            if(registadorDestino_01111.contains("01111")){
                
                registadorDestino_01111  = br2.readLine();//leitura da memoria de dados no arquivo(variavel A)
                System.out.println("Variável A (binario): "+registadorDestino_01111);
                System.out.println("Variável A (decimal): "+Integer.parseInt(registadorDestino_01111,2));
                
            }
        }
        
        instr_type = PC;
        data = PC;
        PC = br.readLine();//PC = data + 1;
        instr_type = data.substring(0,11);//Tipo de operação ( Load, Store, Store Half)
        
        if(instr_type.contains("00001110101")){//load
            registadorDestino_01110 = data.substring(11,16);//Registrador onde será destinado B
            if(registadorDestino_01110.contains("01110")){
                registadorDestino_01110  = br2.readLine();//leitura da memoria de dados no arquivo(variavel B)
                System.out.println("Variável B (binario): "+registadorDestino_01110);
                System.out.println("Variável B (decimal): "+Integer.parseInt(registadorDestino_01110,2));
                
            }
        }
        
        instr_type = PC;
        data = PC;
        PC = br.readLine();//PC = data + 1;
        instr_type = data.substring(0,12);//Tipo de operação ( Load, Store, Store Half)
        int qtBits;
        int soma;
        
        if(instr_type.contains("101101011010")){//ADD
            registadorDestino_01100 = data.substring(12,22);//Registrador onde será guardado a operação C=A+B
            if(registadorDestino_01100.contains("1011001101")){
                soma = Integer.parseInt(registadorDestino_01111/*A*/,2) + Integer.parseInt(registadorDestino_01110/*B*/,2);
                System.out.println("Variável Soma (binario): "+Integer.toBinaryString(soma));
                System.out.println("Variável Soma (decimal): "+soma);
               
                qtBits = 32 - Integer.toBinaryString(soma).length();
                
                System.out.println("Qt de bits 0 a esquerda: "+qtBits);
               escreveArquivo(soma);
            }
        }
    }
}
